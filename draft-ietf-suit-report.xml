<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.12 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-suit-report-03" category="info">

  <front>
    <title abbrev="Secure Reporting of Update Status">Secure Reporting of Update Status</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Birkholz" fullname="Henk Birkholz">
      <organization>Fraunhofer SIT</organization>
      <address>
        <email>henk.birkholz@sit.fraunhofer.de</email>
      </address>
    </author>

    <date year="2022" month="October" day="24"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>The Software Update for the Internet of Things (SUIT) manifest provides
a way for many different update and boot
workflows to be described by a common format. However, this does not
provide a feedback mechanism for developers in the event that an update
or boot fails.</t>

<t>This specification describes a lightweight feedback mechanism that
allows a developer in possession of a manifest to reconstruct the
decisions made and actions performed by a manifest processor.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>

<t>A SUIT manifest processor can fail to install or boot an update for many
reasons. Frequently, the error codes generated by such systems fail to
provide developers with enough information to find root causes and
produce corrective actions, resulting in extra effort to reproduce
failures. Logging the results of each SUIT command can simplify this
process.</t>

<t>While it is possible to report the results of SUIT commands through
existing logging or attestation mechanisms, this comes with several
drawbacks:</t>

<t><list style="symbols">
  <t>data inflation, particularly when designed for text-based logging</t>
  <t>missing information elements</t>
  <t>missing support for multiple components</t>
</list></t>

<t>The CBOR objects defined in this document allow devices to:</t>

<t><list style="symbols">
  <t>report a trace of how an update was performed</t>
  <t>report expected vs. actual values for critical checks</t>
  <t>describe the installation of complex multi-component architectures</t>
  <t>describe the measured properties of a system</t>
  <t>report the exact reason for a parsing failure</t>
</list></t>

<t>This document provides a definition of a SUIT-specific logging container
that may be used in a variety of scenarios.</t>

</section>
<section anchor="terminology"><name>Conventions and Terminology</name>

<t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL</bcp14>
NOT", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>Terms used in this specification include:</t>

<t><list style="symbols">
  <t>Boot: initialization of an executable image. Although this
specification refers to boot, any boot-specific operations described
are equally applicable to starting an executable in an OS context.</t>
</list></t>

</section>
<section anchor="the-suit-record"><name>The SUIT Record</name>

<t>If the developer can be assumed to have a copy of the
manifest, then they need little information to reconstruct what the
manifest processor has done. They simply need any data that influences
the control flow of the manifest. The manifest only supports the
following control flow primitives:</t>

<t><list style="symbols">
  <t>Set Component</t>
  <t>Set/Override Parameters</t>
  <t>Try-Each</t>
  <t>Run Sequence</t>
  <t>Conditions</t>
</list></t>

<t>Of these, only conditions change the behavior of the processor from the
default, and then only when the condition fails.</t>

<t>Then, to reconstruct the flow of a manifest, all a developer needs is
a list of metadata about failed conditions:</t>

<t><list style="symbols">
  <t>the current manifest</t>
  <t>the current section</t>
  <t>the offset into the current section</t>
  <t>the current component index</t>
  <t>the "reason" for failure</t>
</list></t>

<t>Most conditions compare a parameter to an actual value, so the "reason"
is typically simply the actual value.</t>

<t>Since it is possible that a non-condition command (directive) may fail in an
exceptional circumstance, this must be included as well. However, 
a failed directive will terminate processing of the manifest. To accommodate
for a failed command and for explicit "completion," an additional "result"
element is added as well. In the case of a command failure,
the failure reason is typically a numeric error code. However, these error
codes need to be standardised in order to be useful.</t>

<t>Reconstructing what a device has done in this way is compact,
however it requires some reconstruction effort. This is an issue that
can be solved by tooling.</t>

<figure><artwork><![CDATA[
SUIT_Record = [
    suit-record-manifest-id        : [* uint ],
    suit-record-manifest-section   : int,
    suit-record-section-offset     : uint,
    suit-record-component-index    : uint,
    suit-record-properties         : SUIT_Parameters,
    $$SUIT_Record_Extensions
]
]]></artwork></figure>

<t>suit-record-manifest-id is used to identify which manifest contains the
command that caused the record to be generated. The manifest id is a
list of integers that form a walk of the manifest tree, starting at the
root. An empty list indicates that the command was contained in the
root manifest. If the list is not empty, the command was contained in
one of the root manifest's dependencies, or nested even further below
that.</t>

<t>For example, suppose that the root manifest has 3 dependencies
and each of those dependencies has 2 dependencies of its own:</t>

<t><list style="symbols">
  <t>Root  <list style="symbols">
      <t>Dependency A      <list style="symbols">
          <t>Dependency A0</t>
          <t>Dependency A1</t>
        </list></t>
      <t>Dependency B      <list style="symbols">
          <t>Dependency B0</t>
          <t>Dependency B1</t>
        </list></t>
      <t>Dependency C      <list style="symbols">
          <t>Dependency C0</t>
          <t>Dependency C1</t>
        </list></t>
    </list></t>
</list></t>

<t>A manifest-id of [1,0] would indicate that the current command was
contained within Dependency B0. Similarly, a manifest-id of [2,1]
would indicate Dependency C1</t>

<t>suit-record-manifest-section indicates which section of the manifest was
active. This is used in addition to an offset so that the developer can
index into severable sections in a predictable way. The value of this
element is the value of the key that identified the section in the
manifest.</t>

<t>suit-record-section-offset is the number of bytes into the current
section at which the current command is located.</t>

<t>suit-record-component-index is the index of the component that was
specified at the time that the report was generated. This field is
necessary due to the availability of set-current-component values of
True and a list of components. Both of these values cause the manifest
processor to loop over commands using a series of component-ids, so the
developer needs to know which was selected when the command executed.</t>

<t>suit-record-properties contains any measured properties that led to the
command failure.
For example, this could be the actual value of a SUIT_Digest or
class identifier. This is encoded in a SUIT_Parameters block as defined
in <xref target="I-D.ietf-suit-manifest"/>.</t>

</section>
<section anchor="the-suit-report"><name>The SUIT Report</name>

<t>Some metadata is common to all records, such as the root manifest:
the manifest that is the entry-point for the manifest processor. This
metadata is aggregated with a list of SUIT_Records. The SUIT_Report
may also contain a list of any system properties that were measured
and reported, and a reason for a failure if one occured.</t>

<figure><artwork><![CDATA[
SUIT_Report = {
  suit-report-manifest-digest => SUIT_Digest,
  ? suit-report-manifest-uri  => tstr,
  ? suit-report-nonce         => bstr,
  suit-report-records         => [ * SUIT_Record / system-property-claims ],
  suit-report-result          => true / {
    suit-report-result-code   => int, ; could condense to enum later
    suit-report-result-record => SUIT_Record,
  }
  $$SUIT_Report_Extensions
}
system-property-claims = {
  system-component-id => SUIT_Component_Identifier,
  + SUIT_Parameters,
}
]]></artwork></figure>

<t>suit-report-manifest-digest provides a SUIT_Digest (as defined in
<xref target="I-D.ietf-suit-manifest"/>) that is the characteristic digest of the
Root manifest.</t>

<t>suit-report-manifest-uri provides the reference URI that was provided in
the root manifest.</t>

<t>suit-report-nonce provides a container for freshness or replay
protection information. This field <bcp14>MAY</bcp14> be omitted where the suit-report
is authenticated within a container that provides freshness already.
For example, attestation evidence typically contains a proof of
freshness.</t>

<t>suit-report-records is a list of 0 or more SUIT Records or 
system-property-claims. Because SUIT Records are only generated on failure,
in simple cases this can be an empty list.</t>

<t>System properties can be extracted from suit-report-records by filtering
suit-report-records for maps. System Properties are a list of measured 
or asserted properties
of the system that creates the suit report. These properties are scoped by
component identifier. Because this list is expected to be constructed on
the fly by a constrained node, component identifiers may appear more than
once. A recipient may convert the result to a more conventional structure:</t>

<figure><sourcecode type="CDDL"><![CDATA[
SUIT_Record_System_Properties = {
  * component-id => {
    + SUIT_Parameters,
  }
}
]]></sourcecode></figure>

<t>suit-report-result provides a mechanism to show that the SUIT procedure
completed successfully (value is true) or why it failed (value is a map
of an error code and a SUIT_Record).</t>

<t>The suit-report-result-code indicates the reason for the failure. Values
are expected to be CBOR parsing failures, Schema validation failures,
COSE validation failures or SUIT processing failures.</t>

<t>The suit-report-result-record indicates the exact point in the manifest
or manifest dependency tree where the error occured.</t>

</section>
<section anchor="attestation"><name>Attestation</name>

<t>This document describes how a well-informed verifier can infer the trustworthiness of a remote device. Remote attestation is done by using the SUIT_Manifest_Envelope along with the SUIT_Report to reconstruct the state of the device at boot time. By embedding data used for remote attestation in the SUIT_Report, a remote device can use an append-only log to collect both measurements and debug/failure information into the same document. This document can then be conveyed to a verifier as a part of the attestation evidence. A remote attestation format to convey attestation evidence, such as an Entity Attestation Token (EAT, see <xref target="I-D.ietf-rats-eat"/>), that contains a SUIT_Report <bcp14>MUST</bcp14> also include an integrity measurement of the Manifest Processor &amp; Report Generator.</t>

<t>When a Concise Reference Integrity Manifest (CoRIM, see <xref target="I-D.birkholz-rats-corim"/> is delivered in a SUIT_Manifest_Envelope, this codifies the delivery of verification information to the verifier:</t>

<t><list style="symbols">
  <t>The Firmware Distributor:
  <list style="symbols">
      <t>sends the SUIT_Manifest_Envelope to the Verifier without payload or text, but with CoRIM</t>
      <t>sends the SUIT_Manifest_Envelope to the recipient without CoRIM, or text, but with payload</t>
    </list></t>
  <t>The Recipient:
  <list style="symbols">
      <t>Installs the firmware as described in the SUIT_Manifest and generates a SUIT_report, which is encapsulated in an EAT by the installer and sent to the Firmware Distributor.</t>
      <t>Boots the firmware as described in the SUIT_Manifest and creates a SUIT_report, which is encapsulated in an EAT by the installer and sent to the Firmware Distributor.</t>
    </list></t>
  <t>The Firmware Distributor sends both reports to the verifier (separately or together)</t>
  <t>The Verifier:
  <list style="symbols">
      <t>Reconstructs the state of the device using the manifest</t>
      <t>Compares this state to the CoRIM</t>
      <t>Returns an Attestation Report to the Firmware Distributor</t>
    </list></t>
</list></t>

<t>This approach simplifies the design of the bootloader since it is able to use an append-only log. It allows a verifier to validate this report against a signed CoRIM that is provided by the firmware author, which simplifies the delivery chain of verification information to the verifier.</t>

<t>This information is not intended as Attestation Evidence and while an Attestation Report <bcp14>MAY</bcp14> provide this information for conveying error codes and/or failure reports, it <bcp14>SHOULD</bcp14> be translated into general-purpose claims for use by the Relying Party.</t>

</section>
<section anchor="capability-reporting"><name>Capability Reporting</name>

<t>Because SUIT is extensible, a manifest author must know what capabilities a device has available. To enable this, a capability report is a set of lists that define which commands, parameters, algorithms, and component IDs are supported by a manifest processor.</t>

<t>The CDDL for a SUIT_Capability_Report follows:</t>

<figure><sourcecode type="CDDL"><![CDATA[
SUIT_Capability_Report = {
  suit-component-capabilities      => [+ SUIT_Component_Capability ]
  suit-command-capabilities        => [+ int],
  suit-parameters-capabilities     => [+ int],
  suit-crypt-algo-capabilities     => [+ int],
  suit-envelope-capabilities       => [+ int],
  suit-manifest-capabilities       => [+ int],
  suit-common-capabilities         => [+ int],
  suit-text-component-capabilities => [+ int],
  suit-text-capabilities           => [+ int],
  suit-dependency-capabilities     => [+ int],
  $$SUIT_Capability_Report_Extensions
}

SUIT_Component_Capability = [*bstr,?true]
]]></sourcecode></figure>

<t>A SUIT_Component_Capability is similar to a SUIT_Component_ID, with one difference: it may optionally be terminated by a CBOR 'true' which acts as a wild-card match for any component with a prefix matching the SUIT_Component_Capability leading up to the 'true.' This feature is for use with filesystem storage, key value stores, or any other arbitrary-component-id storage systems.</t>

<t>When reporting capabilities, it is <bcp14>OPTIONAL</bcp14> to report capabilities that are declared mandatory by the SUIT Manifest <xref target="I-D.ietf-suit-manifest"/>. Capabilities defined by extensions <bcp14>MUST</bcp14> be reported.</t>

</section>
<section anchor="iana"><name>IANA Considerations</name>

<t>IANA is requested to allocate a CBOR tag for the SUIT Report.</t>

</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t>The SUIT Report should either be carried over a secure transport, or
signed, or both. Ideally, attestation should be used to prove that the
report was generated by legitimate hardware.</t>

</section>
<section anchor="acknowledgements"><name>Acknowledgements</name>

</section>


  </middle>

  <back>

    <references title='Normative References'>




<reference anchor='I-D.ietf-suit-manifest'>
   <front>
      <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Hannes Tschofenig' initials='H.' surname='Tschofenig'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Henk Birkholz' initials='H.' surname='Birkholz'>
         <organization>Fraunhofer SIT</organization>
      </author>
      <author fullname='Koen Zandberg' initials='K.' surname='Zandberg'>
         <organization>Inria</organization>
      </author>
      <author fullname='Ãyvind RÃ¸nningstad' initials='O.' surname='RÃ¸nningstad'>
         <organization>Nordic Semiconductor</organization>
      </author>
      <date day='7' month='October' year='2022'/>
      <abstract>
	 <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the that code/data,
   the devices to which it applies, and cryptographic information
   protecting the manifest.  Software updates and Trusted Invocation
   both tend to use sequences of common operations, so the manifest
   encodes those sequences of operations, rather than declaring the
   metadata.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-manifest-20'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-suit-manifest-20.txt' type='TXT'/>
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>




<reference anchor='I-D.ietf-rats-eat'>
   <front>
      <title>The Entity Attestation Token (EAT)</title>
      <author fullname='Laurence Lundblade' initials='L.' surname='Lundblade'>
         <organization>Security Theory LLC</organization>
      </author>
      <author fullname='Giridhar Mandyam' initials='G.' surname='Mandyam'>
         <organization>Qualcomm Technologies Inc.</organization>
      </author>
      <author fullname='Jeremy O&#39;Donoghue' initials='J.' surname='O&#39;Donoghue'>
         <organization>Qualcomm Technologies Inc.</organization>
      </author>
      <author fullname='Carl Wallace' initials='C.' surname='Wallace'>
         <organization>Red Hound Software, Inc.</organization>
      </author>
      <date day='22' month='October' year='2022'/>
      <abstract>
	 <t>   An Entity Attestation Token (EAT) provides an attested claims set
   that describes state and characteristics of an entity, a device like
   a smartphone, IoT device, network equipment or such.  This claims set
   is used by a relying party, server or service to determine how much
   it wishes to trust the entity.

   An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with
   attestation-oriented claims.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-rats-eat-17'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-rats-eat-17.txt' type='TXT'/>
</reference>


<reference anchor='I-D.birkholz-rats-corim'>
   <front>
      <title>Concise Reference Integrity Manifest</title>
      <author fullname='Henk Birkholz' initials='H.' surname='Birkholz'>
         <organization>Fraunhofer SIT</organization>
      </author>
      <author fullname='Thomas Fossati' initials='T.' surname='Fossati'>
         <organization>arm</organization>
      </author>
      <author fullname='Yogesh Deshpande' initials='Y.' surname='Deshpande'>
         <organization>arm</organization>
      </author>
      <author fullname='Ned Smith' initials='N.' surname='Smith'>
         <organization>Intel</organization>
      </author>
      <author fullname='Wei Pan' initials='W.' surname='Pan'>
         <organization>Huawei Technologies</organization>
      </author>
      <date day='11' month='July' year='2022'/>
      <abstract>
	 <t>   Remote Attestation Procedures (RATS) enable Relying Parties to assess
   the trustworthiness of a remote Attester and therefore to decide
   whether to engage in secure interactions with it.  Evidence about
   trustworthiness can be rather complex and it is deemed unrealistic
   that every Relying Party is capable of the appraisal of Evidence.
   Therefore that burden is typically offloaded to a Verifier.  In order
   to conduct Evidence appraisal, a Verifier requires not only fresh
   Evidence from an Attester, but also trusted Endorsements and
   Reference Values from Endorsers and Reference Value Providers, such
   as manufacturers, distributors, or device owners.  This document
   specifies Concise Reference Integrity Manifests (CoRIM) that
   represent Endorsements and Reference Values in CBOR format.
   Composite devices or systems are represented by a collection of
   Concise Module Identifiers (CoMID) and Concise Software Identifiers
   (CoSWID) bundled in a CoRIM document.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-birkholz-rats-corim-03'/>
   <format target='https://www.ietf.org/archive/id/draft-birkholz-rats-corim-03.txt' type='TXT'/>
</reference>




    </references>



  </back>

<!-- ##markdown-source:
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
Z/8D4po/MEw2AAA=

-->

</rfc>

