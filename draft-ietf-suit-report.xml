<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.12 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-suit-report-01" category="info">

  <front>
    <title abbrev="Secure Reporting of Update Status">Secure Reporting of Update Status</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Birkholz" fullname="Henk Birkholz">
      <organization>Fraunhofer SIT</organization>
      <address>
        <email>henk.birkholz@sit.fraunhofer.de</email>
      </address>
    </author>

    <date year="2022" month="July" day="11"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>The Software Update for the Internet of Things (SUIT) manifest provides
a way for many different update and boot
workflows to be described by a common format. However, this does not
provide a feedback mechanism for developers in the event that an update
or boot fails.</t>

<t>This specification describes a lightweight feedback mechanism that
allows a developer in possession of a manifest to reconstruct the
decisions made and actions performed by a manifest processor.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>

<t>A SUIT manifest processor can fail to install or boot an update for many
reasons. Frequently, the error codes generated by such systems fail to
provide developers with enough information to find root causes and
produce corrective actions, resulting in extra effort to reproduce
failures. Logging the results of each SUIT command can simplify this
process.</t>

<t>While it is possible to report the results of SUIT commands through
existing logging or attestation mechanisms, this comes with several
drawbacks:</t>

<t><list style="symbols">
  <t>data inflation, particularly when designed for text-based logging</t>
  <t>missing information elements</t>
  <t>missing support for multiple components</t>
</list></t>

<t>The CBOR objects defined in this document allow devices to:</t>

<t><list style="symbols">
  <t>report a trace of how an update was performed</t>
  <t>report expected vs. actual values for critical checks</t>
  <t>describe the installation of complex multi-component architectures</t>
  <t>describe the measured properties of a system</t>
  <t>report the exact reason for a parsing failure</t>
</list></t>

<t>This document provides a definition of a SUIT-specific logging container
that may be used in a variety of scenarios.</t>

</section>
<section anchor="terminology"><name>Conventions and Terminology</name>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
"MAY", and "OPTIONAL" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>Terms used in this specification include:</t>

<t><list style="symbols">
  <t>Boot: initialization of an executable image. Although this
specification refers to boot, any boot-specific operations described
are equally applicable to starting an executable in an OS context.</t>
</list></t>

</section>
<section anchor="the-suit-record"><name>The SUIT Record</name>

<t>If the developer can be assumed to have a copy of the
manifest, then they need little information to reconstruct what the
manifest processor has done. They simply need any data that influences
the control flow of the manifest. The manifest only supports the
following control flow primitives:</t>

<t><list style="symbols">
  <t>Set Component/Dependency Index</t>
  <t>Set/Override Parameters</t>
  <t>Try-Each</t>
  <t>Run Sequence</t>
  <t>Conditions.</t>
</list></t>

<t>Of these, only conditions change the behavior of the processor from the
default, and then only when the condition fails.</t>

<t>Then, to reconstruct the flow of a manifest, all a developer needs is
a list of metadata about failed conditions:</t>

<t><list style="symbols">
  <t>the current manifest</t>
  <t>the current section</t>
  <t>the offset into the current section</t>
  <t>the current component index</t>
  <t>the "reason" for failure</t>
</list></t>

<t>Most conditions compare a parameter to an actual value, so the "reason"
is typically simply the actual value.</t>

<t>Since it is possible that a non-condition command (directive) may fail in an
exceptional circumstance, this must be included as well. However, 
a failed directive will terminate processing of the manifest. To accommodate
for a failed command and for explicit "completion," an additional "result"
element is added as well. In the case of a command failure,
the failure reason is typically a numeric error code. However, these error
codes need to be standardised in order to be useful.</t>

<t>Reconstructing what a device has done in this way is compact,
however it requires some reconstruction effort. This is an issue that
can be solved by tooling.</t>

<figure><artwork><![CDATA[
SUIT_Record = {
    suit-record-manifest-id        => [* uint ],
    suit-record-manifest-section   => int,
    suit-record-section-offset     => uint,
    (
        suit-record-component-index  => uint //
        suit-record-dependency-index => uint
    ),
    suit-record-properties     => SUIT_Parameters,
}
]]></artwork></figure>

<t>suit-record-manifest-id is used to identify which manifest contains the
command that caused the record to be generated. The manifest id is a
list of integers that form a walk of the manifest tree, starting at the
root. An empty list indicates that the command was contained in the
root manifest. If the list is not empty, the command was contained in
one of the root manifest's dependencies, or nested even further below
that.</t>

<t>For example, suppose that the root manifest has 3 dependencies
and each of those dependencies has 2 dependencies of its own:</t>

<t><list style="symbols">
  <t>Root  <list style="symbols">
      <t>Dependency A      <list style="symbols">
          <t>Dependency A0</t>
          <t>Dependency A1</t>
        </list></t>
      <t>Dependency B      <list style="symbols">
          <t>Dependency B0</t>
          <t>Dependency B1</t>
        </list></t>
      <t>Dependency C      <list style="symbols">
          <t>Dependency C0</t>
          <t>Dependency C1</t>
        </list></t>
    </list></t>
</list></t>

<t>A manifest-id of [1,0] would indicate that the current command was
contained within Dependency B0. Similarly, a manifest-id of [2,1]
would indicate Dependency C1</t>

<t>suit-record-manifest-section indicates which section of the manifest was
active. This is used in addition to an offset so that the developer can
index into severable sections in a predictable way. The value of this
element is the value of the key that identified the section in the
manifest.</t>

<t>suit-record-section-offset is the number of bytes into the current
section at which the current command is located.</t>

<t>suit-record-component-index is the index of the component that was
specified at the time that the report was generated. This field is
necessary due to the availability of set-current-component values of
True and a list of components. Both of these values cause the manifest
processor to loop over commands using a series of component-ids, so the
developer needs to know which was selected when the command executed.</t>

<t>suit-record-dependency-index is similar to suit-record-component-index
but is used to identify the dependency that was active.</t>

<t>suit-record-properties contains any measured properties that led to the
command failure.
For example, this could be the actual value of a SUIT_Digest or
class identifier. This is encoded in a SUIT_Parameters block as defined
in <xref target="I-D.ietf-suit-manifest"/>.</t>

</section>
<section anchor="the-suit-report"><name>The SUIT Report</name>

<t>Some metadata is common to all records, such as the root manifest:
the manifest that is the entry-point for the manifest processor. This
metadata is aggregated with a list of SUIT_Records. The SUIT_Report
may also contain a list of any system properties that were measured
and reported, and a reason for a failure if one occured.</t>

<figure><artwork><![CDATA[
SUIT_Report = {
  suit-report-manifest-digest => SUIT_Digest,
  ? suit-report-manifest-uri  => tstr,
  ? suit-report-nonce         => bstr,
  suit-report-records         => [ * SUIT_Record ],
  ? suit-system-properties      => [ + system-property-claims ],
  suit-report-result          => true / {
    suit-report-result-code   => int, ; could condense to enum later
    suit-report-result-record => SUIT_Record,
  }
}
system-property-claims = {
  system-component-id => SUIT_Component_Identifier,
  + SUIT_Parameters,
}

]]></artwork></figure>

<t>suit-report-manifest-digest provides a SUIT_Digest (as defined in
<xref target="I-D.ietf-suit-manifest"/>) that is the characteristic digest of the
Root manifest.</t>

<t>suit-report-manifest-uri provides the reference URI that was provided in
the root manifest.</t>

<t>suit-report-nonce provides a container for freshness or replay
protection information. This field MAY be omitted where the suit-report
is authenticated within a container that provides freshness already.
For example, attestation evidence typically contains a proof of
freshness.</t>

<t>suit-system-properties provides a list of measured or asserted properties
of the system that creates the suit report. These properties are scoped by
component identifier. Because this list is expected to be constructed on
the fly by a constrained node, component identifiers may appear more than
once. A recipient may convert the result to a more conventional structure:</t>

<figure><sourcecode type="CDDL"><![CDATA[
SUIT_Record_System_Properties = {
  * component-id => {
    + SUIT_Parameters,
  }
}
]]></sourcecode></figure>

<t>suit-report-records is a list of 0 or more SUIT Records. Because SUIT
Records are only generated on failure, in simple cases this can be an
empty list.</t>

<t>suit-report-result provides a mechanism to show that the SUIT procedure
completed successfully (value is true) or why it failed (value is a map
of an error code and a SUIT_Record).</t>

<t>The suit-report-result-code indicates the reason for the failure. Values
are expected to be CBOR parsing failures, Schema validation failures,
COSE validation failures or SUIT processing failures.</t>

<t>The suit-report-result-record indicates the exact point in the manifest
or manifest dependency tree where the error occured.</t>

</section>
<section anchor="attestation"><name>Attestation</name>

<t>This document can allow a well-informed verifier to infer the trustworthiness of a device. This is done by using the SUIT_Manifest_Envelope along with the SUIT_Report to reconstruct the state of the device at boot time. This approach allows a device to use an append-only log to collect both measurements and debug/failure information into the same document. This document can then be transfered to a verifier as a part of the attestation evidence. This must include an attestation of the Manifest Parser &amp; Report Generator.</t>

<t>When a CoRIM is delivered in a SUIT_Manifest_Envelope, this codifies the delivery of verification information to the verifier:</t>

<t><list style="symbols">
  <t>The Firmware Distributor:
  <list style="symbols">
      <t>sends the SUIT_Manifest_Envelope to the Verifier without payload or text, but with CoRIM</t>
      <t>sends the SUIT_Manifest_Envelope to the recipient without CoRIM, or text, but with payload</t>
    </list></t>
  <t>The Recipient:
  <list style="symbols">
      <t>Installs the firmware as described in the SUIT_Manifest and generates a SUIT_report, which is encapsulated in an EAT by the installer and sent to the Firmware Distributor.</t>
      <t>Boots the firmware as described in the SUIT_Manifest and creates a SUIT_report, which is encapsulated in an EAT by the installer and sent to the Firmware Distributor.</t>
    </list></t>
  <t>The Firmware Distributor sends both reports to the verifier (separately or together)</t>
  <t>The Verifier:
  <list style="symbols">
      <t>Reconstructs the state of the device using the manifest</t>
      <t>Compares this state to the CoRIM</t>
      <t>Returns an Attestation Report to the Firmware Distributor</t>
    </list></t>
</list></t>

<t>This approach simplifies the design of the bootloader since it is able to use an append-only log. It allows a verifier to validate this report against a signed CoRIM that is provided by the firmware author, which simplifies the delivery chain of verification information to the verifier.</t>

<t>This information is not intended as Attestation Evidence and while an Attestation Report MAY provide this information for conveying error codes and/or failure reports, it SHOULD be translated into general-purpose claims for use by the Relying Party.</t>

</section>
<section anchor="iana"><name>IANA Considerations</name>

<t>IANA is requested to allocate a CBOR tag for the SUIT Report.</t>

</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t>The SUIT Report should either be carried over a secure transport, or
signed, or both. Ideally, attestation should be used to prove that the
report was generated by legitimate hardware.</t>

</section>
<section anchor="acknowledgements"><name>Acknowledgements</name>

</section>


  </middle>

  <back>

    <references title='Normative References'>




<reference anchor='I-D.ietf-suit-manifest'>
   <front>
      <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
      <author fullname='Brendan Moran'>
	 <organization>Arm Limited</organization>
      </author>
      <author fullname='Hannes Tschofenig'>
	 <organization>Arm Limited</organization>
      </author>
      <author fullname='Henk Birkholz'>
	 <organization>Fraunhofer SIT</organization>
      </author>
      <author fullname='Koen Zandberg'>
	 <organization>Inria</organization>
      </author>
      <date day='11' month='July' year='2022'/>
      <abstract>
	 <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the that code/data,
   the devices to which it applies, and cryptographic information
   protecting the manifest.  Software updates and Trusted Invocation
   both tend to use sequences of common operations, so the manifest
   encodes those sequences of operations, rather than declaring the
   metadata.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-manifest-18'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-suit-manifest-18.txt' type='TXT'/>
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>




  </back>

<!-- ##markdown-source:
H4sIAKiYzGIAA71a647bSHb+z6eotIHE9kiy21kg2Q422b544gbc05Pu9gSL
mUGjRJYkrilSU0Va1hr2s+RZ8mT5zoXFolpaZPMjA8xMi6zLqXP5zndOcTqd
Zm3ZVu7M3Lu8887cuU3j27JemmZhPmwK2zpz39q2C5mdz7379L8ZWTR5bddY
tPB20U5L1y6moSvbqec509enWY7hy8bvzkxZL5osKzf+zLS+C+2b169///pN
Zr2zulfZ7rJt4z8ufdNt8OzD9UP20e3wqDgz13XrfO3a6RXtlWWhtXXxaKum
xv47F7JNeZYZ4xe5K0K7q/SpMW2TJ3+WdeHqtn8QIKV3ixB/79ajn60v8zg4
b9ZrzI1vy7oq62Eb97mdVmVop1hk3lQYNm1efoc30NLabjbQoIy1XbtqPISd
4iX/U9YYfTEzN423df9QNHvhXV3Yevyq8Utbl3+xbdnUZ+bcr837cl22rugH
uLUtqzh5xpP/aP16hjNgXzPa+N3MXJT+46qp/jLe+52rPz55Nd77e2+7etUs
nDf3sNZ4+xXmz+Y6/4+hbGeLOHxWuCyrG7/GQp8cWe56ejUbPGiNTRYuQPnG
ZNl0OjV2DnPYHKZ/WMEDm0W7he/0HrlovGnxvHcTctaHFXQezHNypBemX9Fs
fPOpLMgQZmt3PBPvdqYoFxAMFjadrAkHM/OmadkpF1WzDfAgM3cGk3Nfzh1e
74xlx2hqWginmZl3zdZ9cn4CecoA67tgaiyi22L8wrlibvOPZu3yFaQKaxai
wKyq2TgfYBc+DB5AmnZlW8iiUmUYSUKZBXQcZqQN7BI2Li8XZc5mifIFbFaV
y1W7dfTfQxvT4pmt+HB2EIEk2DQhuBBoQSjTDgqEErzLmxr26HKSz2UFtqeR
AaMK0RxMxQ+wGmmmV1ZqhhzLN34m9l2XRVHBKZ6RDX1TdDw/y84ZCA7MMzmU
QloggeDJLY5heu1EfUX7ZgCaAIFmcFr3WwfNVruJqNl7Wq2B2szS1c5jGksb
unwFTAitW4d+p2jHxFzbsl0ZVzfdcsUwx14NtUGuBQDHeJIot10gi9QFLYHj
OWzpoUgKgF5bE2g2dBXDLUwATPHWuAWWVLXr1IykATrjNO+b5ZKG00lkciB7
OQvZWXPknmQQUlco15uqXOzYNzNVJQzwn6uycqZsDXyJ7F7O8VM25K3Ha6fL
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
FiNOoEsuAAA=

-->

</rfc>

