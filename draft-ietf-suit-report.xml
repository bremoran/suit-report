<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.12 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-suit-report-03" category="info">

  <front>
    <title abbrev="Secure Reporting of Update Status">Secure Reporting of Update Status</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>brendan.moran.ietf@gmail.com</email>
      </address>
    </author>
    <author initials="H." surname="Birkholz" fullname="Henk Birkholz">
      <organization>Fraunhofer SIT</organization>
      <address>
        <email>henk.birkholz@sit.fraunhofer.de</email>
      </address>
    </author>

    <date year="2022" month="October" day="24"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>The Software Update for the Internet of Things (SUIT) manifest provides
a way for many different update and boot
workflows to be described by a common format. However, this does not
provide a feedback mechanism for developers in the event that an update
or boot fails.</t>

<t>This specification describes a lightweight feedback mechanism that
allows a developer in possession of a manifest to reconstruct the
decisions made and actions performed by a manifest processor.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>

<t>A SUIT manifest processor can fail to install or boot an update for many
reasons. Frequently, the error codes generated by such systems fail to
provide developers with enough information to find root causes and
produce corrective actions, resulting in extra effort to reproduce
failures. Logging the results of each SUIT command can simplify this
process.</t>

<t>While it is possible to report the results of SUIT commands through
existing logging or attestation mechanisms, this comes with several
drawbacks:</t>

<t><list style="symbols">
  <t>data inflation, particularly when designed for text-based logging</t>
  <t>missing information elements</t>
  <t>missing support for multiple components</t>
</list></t>

<t>The CBOR objects defined in this document allow devices to:</t>

<t><list style="symbols">
  <t>report a trace of how an update was performed</t>
  <t>report expected vs. actual values for critical checks</t>
  <t>describe the installation of complex multi-component architectures</t>
  <t>describe the measured properties of a system</t>
  <t>report the exact reason for a parsing failure</t>
</list></t>

<t>This document provides a definition of a SUIT-specific logging container
that may be used in a variety of scenarios.</t>

</section>
<section anchor="terminology"><name>Conventions and Terminology</name>

<t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL</bcp14>
NOT", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>Terms used in this specification include:</t>

<t><list style="symbols">
  <t>Boot: initialization of an executable image. Although this
specification refers to boot, any boot-specific operations described
are equally applicable to starting an executable in an OS context.</t>
</list></t>

</section>
<section anchor="the-suit-record"><name>The SUIT Record</name>

<t>If the developer can be assumed to have a copy of the
manifest, then they need little information to reconstruct what the
manifest processor has done. They simply need any data that influences
the control flow of the manifest. The manifest only supports the
following control flow primitives:</t>

<t><list style="symbols">
  <t>Set Component</t>
  <t>Set/Override Parameters</t>
  <t>Try-Each</t>
  <t>Run Sequence</t>
  <t>Conditions</t>
</list></t>

<t>Of these, only conditions change the behavior of the processor from the
default, and then only when the condition fails.</t>

<t>Then, to reconstruct the flow of a manifest, all a developer needs is
a list of metadata about failed conditions:</t>

<t><list style="symbols">
  <t>the current manifest</t>
  <t>the current section</t>
  <t>the offset into the current section</t>
  <t>the current component index</t>
  <t>the "reason" for failure</t>
</list></t>

<t>Most conditions compare a parameter to an actual value, so the "reason"
is typically simply the actual value.</t>

<t>Since it is possible that a non-condition command (directive) may fail in an
exceptional circumstance, this must be included as well. However, 
a failed directive will terminate processing of the manifest. To accommodate
for a failed command and for explicit "completion," an additional "result"
element is added as well. In the case of a command failure,
the failure reason is typically a numeric error code. However, these error
codes need to be standardised in order to be useful.</t>

<t>Reconstructing what a device has done in this way is compact,
however it requires some reconstruction effort. This is an issue that
can be solved by tooling.</t>

<figure><artwork><![CDATA[
SUIT_Record = [
    suit-record-manifest-id        : [* uint ],
    suit-record-manifest-section   : int,
    suit-record-section-offset     : uint,
    suit-record-component-index    : uint,
    suit-record-properties         : SUIT_Parameters,
    $$SUIT_Record_Extensions
]
]]></artwork></figure>

<t>suit-record-manifest-id is used to identify which manifest contains the
command that caused the record to be generated. The manifest id is a
list of integers that form a walk of the manifest tree, starting at the
root. An empty list indicates that the command was contained in the
root manifest. If the list is not empty, the command was contained in
one of the root manifest's dependencies, or nested even further below
that.</t>

<t>For example, suppose that the root manifest has 3 dependencies
and each of those dependencies has 2 dependencies of its own:</t>

<t><list style="symbols">
  <t>Root  <list style="symbols">
      <t>Dependency A      <list style="symbols">
          <t>Dependency A0</t>
          <t>Dependency A1</t>
        </list></t>
      <t>Dependency B      <list style="symbols">
          <t>Dependency B0</t>
          <t>Dependency B1</t>
        </list></t>
      <t>Dependency C      <list style="symbols">
          <t>Dependency C0</t>
          <t>Dependency C1</t>
        </list></t>
    </list></t>
</list></t>

<t>A manifest-id of [1,0] would indicate that the current command was
contained within Dependency B0. Similarly, a manifest-id of [2,1]
would indicate Dependency C1</t>

<t>suit-record-manifest-section indicates which section of the manifest was
active. This is used in addition to an offset so that the developer can
index into severable sections in a predictable way. The value of this
element is the value of the key that identified the section in the
manifest.</t>

<t>suit-record-section-offset is the number of bytes into the current
section at which the current command is located.</t>

<t>suit-record-component-index is the index of the component that was
specified at the time that the report was generated. This field is
necessary due to the availability of set-current-component values of
True and a list of components. Both of these values cause the manifest
processor to loop over commands using a series of component-ids, so the
developer needs to know which was selected when the command executed.</t>

<t>suit-record-properties contains any measured properties that led to the
command failure.
For example, this could be the actual value of a SUIT_Digest or
class identifier. This is encoded in a SUIT_Parameters block as defined
in <xref target="I-D.ietf-suit-manifest"/>.</t>

</section>
<section anchor="the-suit-report"><name>The SUIT Report</name>

<t>Some metadata is common to all records, such as the root manifest:
the manifest that is the entry-point for the manifest processor. This
metadata is aggregated with a list of SUIT_Records. The SUIT_Report
may also contain a list of any system properties that were measured
and reported, and a reason for a failure if one occured.</t>

<figure><artwork><![CDATA[
SUIT_Report = {
  suit-report-manifest-digest => SUIT_Digest,
  ? suit-report-manifest-uri  => tstr,
  ? suit-report-nonce         => bstr,
  suit-report-records         => [ * SUIT_Record / system-property-claims ],
  suit-report-result          => true / {
    suit-report-result-code   => int, ; could condense to enum later
    suit-report-result-record => SUIT_Record,
  }
  $$SUIT_Report_Extensions
}
system-property-claims = {
  system-component-id => SUIT_Component_Identifier,
  + SUIT_Parameters,
}
]]></artwork></figure>

<t>suit-report-manifest-digest provides a SUIT_Digest (as defined in
<xref target="I-D.ietf-suit-manifest"/>) that is the characteristic digest of the
Root manifest.</t>

<t>suit-report-manifest-uri provides the reference URI that was provided in
the root manifest.</t>

<t>suit-report-nonce provides a container for freshness or replay
protection information. This field <bcp14>MAY</bcp14> be omitted where the suit-report
is authenticated within a container that provides freshness already.
For example, attestation evidence typically contains a proof of
freshness.</t>

<t>suit-report-records is a list of 0 or more SUIT Records or 
system-property-claims. Because SUIT Records are only generated on failure,
in simple cases this can be an empty list. SUIT_Records and 
suit-system-property-claims are merged into a single list because this
reduces the overhead for a constrained node that generates this report.
The use of a single append-only log allows report generators to use simple
memory management. Because the system-property-claims are encoded as maps
and SUIT_Records are encoded as lists, a recipient need only filter the
CBOR Type-5 entries from suit-report-records to obtain all 
system-property-claims.</t>

<t>System properties can be extracted from suit-report-records by filtering
suit-report-records for maps. System Properties are a list of measured 
or asserted properties
of the system that creates the suit report. These properties are scoped by
component identifier. Because this list is expected to be constructed on
the fly by a constrained node, component identifiers may appear more than
once. A recipient may convert the result to a more conventional structure:</t>

<figure><sourcecode type="CDDL"><![CDATA[
SUIT_Record_System_Properties = {
  * component-id => {
    + SUIT_Parameters,
  }
}
]]></sourcecode></figure>

<t>suit-report-result provides a mechanism to show that the SUIT procedure
completed successfully (value is true) or why it failed (value is a map
of an error code and a SUIT_Record).</t>

<t>The suit-report-result-code indicates the reason for the failure. Values
are expected to be CBOR parsing failures, Schema validation failures,
COSE validation failures or SUIT processing failures.</t>

<t>The suit-report-result-record indicates the exact point in the manifest
or manifest dependency tree where the error occured.</t>

</section>
<section anchor="attestation"><name>Attestation</name>

<t>This document describes how a well-informed verifier can infer the trustworthiness of a remote device. Remote attestation is done by using the SUIT_Manifest_Envelope along with the SUIT_Report to reconstruct the state of the device at boot time. By embedding data used for remote attestation in the SUIT_Report, a remote device can use an append-only log to collect both measurements and debug/failure information into the same document. This document can then be conveyed to a verifier as a part of the attestation evidence. A remote attestation format to convey attestation evidence, such as an Entity Attestation Token (EAT, see <xref target="I-D.ietf-rats-eat"/>), that contains a SUIT_Report <bcp14>MUST</bcp14> also include an integrity measurement of the Manifest Processor &amp; Report Generator.</t>

<t>When a Concise Reference Integrity Manifest (CoRIM, see <xref target="I-D.birkholz-rats-corim"/> is delivered in a SUIT_Manifest_Envelope, this codifies the delivery of verification information to the verifier:</t>

<t><list style="symbols">
  <t>The Firmware Distributor:
  <list style="symbols">
      <t>sends the SUIT_Manifest_Envelope to the Verifier without payload or text, but with CoRIM</t>
      <t>sends the SUIT_Manifest_Envelope to the recipient without CoRIM, or text, but with payload</t>
    </list></t>
  <t>The Recipient:
  <list style="symbols">
      <t>Installs the firmware as described in the SUIT_Manifest and generates a SUIT_report, which is encapsulated in an EAT by the installer and sent to the Firmware Distributor.</t>
      <t>Boots the firmware as described in the SUIT_Manifest and creates a SUIT_report, which is encapsulated in an EAT by the installer and sent to the Firmware Distributor.</t>
    </list></t>
  <t>The Firmware Distributor sends both reports to the verifier (separately or together)</t>
  <t>The Verifier:
  <list style="symbols">
      <t>Reconstructs the state of the device using the manifest</t>
      <t>Compares this state to the CoRIM</t>
      <t>Returns an Attestation Report to the Firmware Distributor</t>
    </list></t>
</list></t>

<t>This approach simplifies the design of the bootloader since it is able to use an append-only log. It allows a verifier to validate this report against a signed CoRIM that is provided by the firmware author, which simplifies the delivery chain of verification information to the verifier.</t>

<t>This information is not intended as Attestation Evidence and while an Attestation Report <bcp14>MAY</bcp14> provide this information for conveying error codes and/or failure reports, it <bcp14>SHOULD</bcp14> be translated into general-purpose claims for use by the Relying Party.</t>

</section>
<section anchor="capability-reporting"><name>Capability Reporting</name>

<t>Because SUIT is extensible, a manifest author must know what capabilities a device has available. To enable this, a capability report is a set of lists that define which commands, parameters, algorithms, and component IDs are supported by a manifest processor.</t>

<t>The CDDL for a SUIT_Capability_Report follows:</t>

<figure><sourcecode type="CDDL"><![CDATA[
SUIT_Capability_Report = {
  suit-component-capabilities        => [+ SUIT_Component_Capability ]
  suit-command-capabilities          => [+ int],
  suit-parameters-capabilities       => [+ int],
  suit-crypt-algo-capabilities       => [+ int],
  ? suit-envelope-capabilities       => [+ int],
  ? suit-manifest-capabilities       => [+ int],
  ? suit-common-capabilities         => [+ int],
  ? suit-text-component-capabilities => [+ int],
  ? suit-text-capabilities           => [+ int],
  ? suit-dependency-capabilities     => [+ int],
  * [+int]                           => [+ int],
  $$SUIT_Capability_Report_Extensions
}

SUIT_Component_Capability = [*bstr,?true]
]]></sourcecode></figure>

<t>A SUIT_Component_Capability is similar to a SUIT_Component_ID, with one difference: it may optionally be terminated by a CBOR 'true' which acts as a wild-card match for any component with a prefix matching the SUIT_Component_Capability leading up to the 'true.' This feature is for use with filesystem storage, key value stores, or any other arbitrary-component-id storage systems.</t>

<t>When reporting capabilities, it is <bcp14>OPTIONAL</bcp14> to report capabilities that are declared mandatory by the SUIT Manifest <xref target="I-D.ietf-suit-manifest"/>. Capabilities defined by extensions <bcp14>MUST</bcp14> be reported.</t>

<t>Additional capability reporting can be added as follows: if a manifest element does not exist in this map, it can be added by specifying the CBOR path to the manifest element in an array and using this as the key. For example SUIT_Dependencies, as described in <xref target="I-D.ietf-suit-trust-domains"/> could have an extension added, which was key 3 in the SUIT_Dependencies map. This capability would be reported as: [3, 3, 1] =&gt; [3], where the key consists of the key for SUIT_Manifest (3), the key for SUIT_Common (3), and the key for SUIT_Dependencies (1). Then the value indicates that this manifest processor supports the extension (3).</t>

</section>
<section anchor="iana"><name>IANA Considerations</name>

<t>IANA is requested to allocate a CBOR tag for the SUIT Report.</t>

</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t>The SUIT Report should either be carried over a secure transport, or
signed, or both. Ideally, attestation should be used to prove that the
report was generated by legitimate hardware.</t>

</section>
<section anchor="acknowledgements"><name>Acknowledgements</name>

</section>


  </middle>

  <back>

    <references title='Normative References'>




<reference anchor='I-D.ietf-suit-manifest'>
   <front>
      <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Hannes Tschofenig' initials='H.' surname='Tschofenig'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Henk Birkholz' initials='H.' surname='Birkholz'>
         <organization>Fraunhofer SIT</organization>
      </author>
      <author fullname='Koen Zandberg' initials='K.' surname='Zandberg'>
         <organization>Inria</organization>
      </author>
      <author fullname='Ãyvind RÃ¸nningstad' initials='O.' surname='RÃ¸nningstad'>
         <organization>Nordic Semiconductor</organization>
      </author>
      <date day='7' month='October' year='2022'/>
      <abstract>
	 <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the that code/data,
   the devices to which it applies, and cryptographic information
   protecting the manifest.  Software updates and Trusted Invocation
   both tend to use sequences of common operations, so the manifest
   encodes those sequences of operations, rather than declaring the
   metadata.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-manifest-20'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-suit-manifest-20.txt' type='TXT'/>
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>




<reference anchor='I-D.ietf-rats-eat'>
   <front>
      <title>The Entity Attestation Token (EAT)</title>
      <author fullname='Laurence Lundblade' initials='L.' surname='Lundblade'>
         <organization>Security Theory LLC</organization>
      </author>
      <author fullname='Giridhar Mandyam' initials='G.' surname='Mandyam'>
         <organization>Qualcomm Technologies Inc.</organization>
      </author>
      <author fullname='Jeremy O&#39;Donoghue' initials='J.' surname='O&#39;Donoghue'>
         <organization>Qualcomm Technologies Inc.</organization>
      </author>
      <author fullname='Carl Wallace' initials='C.' surname='Wallace'>
         <organization>Red Hound Software, Inc.</organization>
      </author>
      <date day='22' month='October' year='2022'/>
      <abstract>
	 <t>   An Entity Attestation Token (EAT) provides an attested claims set
   that describes state and characteristics of an entity, a device like
   a smartphone, IoT device, network equipment or such.  This claims set
   is used by a relying party, server or service to determine how much
   it wishes to trust the entity.

   An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with
   attestation-oriented claims.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-rats-eat-17'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-rats-eat-17.txt' type='TXT'/>
</reference>


<reference anchor='I-D.birkholz-rats-corim'>
   <front>
      <title>Concise Reference Integrity Manifest</title>
      <author fullname='Henk Birkholz' initials='H.' surname='Birkholz'>
         <organization>Fraunhofer SIT</organization>
      </author>
      <author fullname='Thomas Fossati' initials='T.' surname='Fossati'>
         <organization>arm</organization>
      </author>
      <author fullname='Yogesh Deshpande' initials='Y.' surname='Deshpande'>
         <organization>arm</organization>
      </author>
      <author fullname='Ned Smith' initials='N.' surname='Smith'>
         <organization>Intel</organization>
      </author>
      <author fullname='Wei Pan' initials='W.' surname='Pan'>
         <organization>Huawei Technologies</organization>
      </author>
      <date day='11' month='July' year='2022'/>
      <abstract>
	 <t>   Remote Attestation Procedures (RATS) enable Relying Parties to assess
   the trustworthiness of a remote Attester and therefore to decide
   whether to engage in secure interactions with it.  Evidence about
   trustworthiness can be rather complex and it is deemed unrealistic
   that every Relying Party is capable of the appraisal of Evidence.
   Therefore that burden is typically offloaded to a Verifier.  In order
   to conduct Evidence appraisal, a Verifier requires not only fresh
   Evidence from an Attester, but also trusted Endorsements and
   Reference Values from Endorsers and Reference Value Providers, such
   as manufacturers, distributors, or device owners.  This document
   specifies Concise Reference Integrity Manifests (CoRIM) that
   represent Endorsements and Reference Values in CBOR format.
   Composite devices or systems are represented by a collection of
   Concise Module Identifiers (CoMID) and Concise Software Identifiers
   (CoSWID) bundled in a CoRIM document.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-birkholz-rats-corim-03'/>
   <format target='https://www.ietf.org/archive/id/draft-birkholz-rats-corim-03.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-suit-trust-domains'>
   <front>
      <title>SUIT Manifest Extensions for Multiple Trust Domains</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Ken Takayama' initials='K.' surname='Takayama'>
         <organization>SECOM CO., LTD.</organization>
      </author>
      <date day='24' month='October' year='2022'/>
      <abstract>
	 <t>   This specification describes extensions to the SUIT manifest format
   (as defined in [I-D.ietf-suit-manifest]) for use in deployments with
   multiple trust domains.  A device has more than one trust domain when
   it enables delegation of different rights to mutually distrustful
   entities for use with different purposes or components in the context
   of firmware update.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-trust-domains-01'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-suit-trust-domains-01.txt' type='TXT'/>
</reference>




    </references>



  </back>

<!-- ##markdown-source:
H4sIAITJVmMAA71b65LcNnb+z6dAxluxJHe3NLZTyU7i3R3NjOOpkixnZuSU
S1Kp0CS6mys22SZIjXpV8rPkWfJk+c4FINgXxZsfUe1lSAIHB+f6nQP0dDrN
urKr3Jm5dXnfOnPjNk3blfXSNAvzclPYzpnbzna9z+x83rr3v2dk0eS1XYNo
0dpFNy1dt5j6vuymLc+ZPvkmyzF82bTbM1PWiybLyk17Zrq2993XT5788cnX
mW2d1bXKbpvdN+27Zdv0G7x7eX2XvXNbvCrOzHXdubZ23fSS1soy39m6eGur
psb6W+ezTXmWGdMuclf4blvpW2O6Jk/+LOvC1V144cFl6xY+Pm/Xo8euLfM4
OG/Wa8yNX8u6KuthGfehm1al76YgMm8qDJs2j77CF0hpbTcbSFDG2r5bNS2Y
neIj/ytrjH46M8+b1tbhpUj2aevqwtbjT027tHX5N9uVTX1mztu1eVauy84V
YYBb27I6M3OZPFvT5Bmp5y9L+jLDVrC8Ga3/w8w8Ldt3q6b625iFH1z9bu/T
mIXvW9vXq2bhWnMLpY25WGH+bK7z/+LLbraIw2eFg03AMto1SL13pMLr6SXz
Om1t56fOQgFX53f6IdCRj3nTluszc9HcXD9PZ7IRspVNiwZcYH9ZVh9chIeu
sZeF8x1GTadTY+fQvM1hZXcrGHuz6O5hpsH4wazp8D5YJPnF3Qrq9eYB2exD
E8iZTdu8LwvSubm3W56Jb1tTlAtsHsZkeqEJWzbzpunY/hdVc+9hrGbuDCbn
bTl3+Lw1lm2wqY3Ia2Z+aO7de9dOwE/pYWjOmxpEdFmMXzhXzG3+zqxdvgJX
fs1MFJhVNRvXeuieN4MX4KZb2Q68KFcZRhJTZgE9+hlJA6v4jcvLRZmz6iN/
HotV5XLV3Tv630MLE/HMVrw5O7BAHGwa7533RBDCtIMAIYTW5U0NffQ58eey
AsvTSI9RhUgOquIXoEaSCcJK1ZCDfNPORL/rsigqGN4XpMO2KXqen2XnHHMO
zDM5hEJSIIZgTR22YYJ0oryifjPENA+GZnAM92sPyVbbiYi5bYlaA7GZpasd
rFi49X2+QvjxnVv7sFLUY6Ku+7JbGVc3/XJlot9AbOBrgdhmWuIot70njdQF
kcD2HJZsIUiy/iCtCSTr+4ojO1SA8NVa4xYgqWLXqRlxg0SA3TxrlksaTjuR
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

-->

</rfc>

